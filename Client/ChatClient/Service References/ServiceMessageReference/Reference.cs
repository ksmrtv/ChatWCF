//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceMessageReference {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupValidation", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public enum GroupValidation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupNameIsExists = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupCreateSuccess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupCreateError = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupNotFound = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupEditSuccess = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMessageReference.IServiceSendMessage", CallbackContract=typeof(ChatClient.ServiceMessageReference.IServiceSendMessageCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServiceSendMessage {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/Subscribe", ReplyAction="http://tempuri.org/IServiceSendMessage/SubscribeResponse")]
        int Subscribe(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/Subscribe", ReplyAction="http://tempuri.org/IServiceSendMessage/SubscribeResponse")]
        System.Threading.Tasks.Task<int> SubscribeAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/Unsubscribe")]
        void Unsubscribe(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/SendPublicMessage")]
        void SendPublicMessage(int idUserFrom, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/SendPublicMessage")]
        System.Threading.Tasks.Task SendPublicMessageAsync(int idUserFrom, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/SendPrivateMessage", ReplyAction="http://tempuri.org/IServiceSendMessage/SendPrivateMessageResponse")]
        bool SendPrivateMessage(int idUserFrom, string idTo, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/SendPrivateMessage", ReplyAction="http://tempuri.org/IServiceSendMessage/SendPrivateMessageResponse")]
        System.Threading.Tasks.Task<bool> SendPrivateMessageAsync(int idUserFrom, string idTo, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/GetAllUsers", ReplyAction="http://tempuri.org/IServiceSendMessage/GetAllUsersResponse")]
        string[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/GetAllUsers", ReplyAction="http://tempuri.org/IServiceSendMessage/GetAllUsersResponse")]
        System.Threading.Tasks.Task<string[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/CreateGroup", ReplyAction="http://tempuri.org/IServiceSendMessage/CreateGroupResponse")]
        ChatClient.ServiceMessageReference.GroupValidation CreateGroup(string name, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/CreateGroup", ReplyAction="http://tempuri.org/IServiceSendMessage/CreateGroupResponse")]
        System.Threading.Tasks.Task<ChatClient.ServiceMessageReference.GroupValidation> CreateGroupAsync(string name, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/EditGroup", ReplyAction="http://tempuri.org/IServiceSendMessage/EditGroupResponse")]
        ChatClient.ServiceMessageReference.GroupValidation EditGroup(string oldname, string newName, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/EditGroup", ReplyAction="http://tempuri.org/IServiceSendMessage/EditGroupResponse")]
        System.Threading.Tasks.Task<ChatClient.ServiceMessageReference.GroupValidation> EditGroupAsync(string oldname, string newName, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/GetUsersFromGroup", ReplyAction="http://tempuri.org/IServiceSendMessage/GetUsersFromGroupResponse")]
        string[] GetUsersFromGroup(string grpName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/GetUsersFromGroup", ReplyAction="http://tempuri.org/IServiceSendMessage/GetUsersFromGroupResponse")]
        System.Threading.Tasks.Task<string[]> GetUsersFromGroupAsync(string grpName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceSendMessageCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/ReceiveUsers")]
        void ReceiveUsers(string[] users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/ReceivePublicMessage")]
        void ReceivePublicMessage(string from, string mess, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSendMessage/ReceivePrivateMessage", ReplyAction="http://tempuri.org/IServiceSendMessage/ReceivePrivateMessageResponse")]
        bool ReceivePrivateMessage(string from, string to, string mess, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceSendMessage/ReceiveGroups")]
        void ReceiveGroups(string[] groups);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceSendMessageChannel : ChatClient.ServiceMessageReference.IServiceSendMessage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSendMessageClient : System.ServiceModel.DuplexClientBase<ChatClient.ServiceMessageReference.IServiceSendMessage>, ChatClient.ServiceMessageReference.IServiceSendMessage {
        
        public ServiceSendMessageClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceSendMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceSendMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSendMessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSendMessageClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Subscribe(string login) {
            return base.Channel.Subscribe(login);
        }
        
        public System.Threading.Tasks.Task<int> SubscribeAsync(string login) {
            return base.Channel.SubscribeAsync(login);
        }
        
        public void Unsubscribe(int id) {
            base.Channel.Unsubscribe(id);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int id) {
            return base.Channel.UnsubscribeAsync(id);
        }
        
        public void SendPublicMessage(int idUserFrom, string message) {
            base.Channel.SendPublicMessage(idUserFrom, message);
        }
        
        public System.Threading.Tasks.Task SendPublicMessageAsync(int idUserFrom, string message) {
            return base.Channel.SendPublicMessageAsync(idUserFrom, message);
        }
        
        public bool SendPrivateMessage(int idUserFrom, string idTo, string text) {
            return base.Channel.SendPrivateMessage(idUserFrom, idTo, text);
        }
        
        public System.Threading.Tasks.Task<bool> SendPrivateMessageAsync(int idUserFrom, string idTo, string text) {
            return base.Channel.SendPrivateMessageAsync(idUserFrom, idTo, text);
        }
        
        public string[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public ChatClient.ServiceMessageReference.GroupValidation CreateGroup(string name, string[] users) {
            return base.Channel.CreateGroup(name, users);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ServiceMessageReference.GroupValidation> CreateGroupAsync(string name, string[] users) {
            return base.Channel.CreateGroupAsync(name, users);
        }
        
        public ChatClient.ServiceMessageReference.GroupValidation EditGroup(string oldname, string newName, string[] users) {
            return base.Channel.EditGroup(oldname, newName, users);
        }
        
        public System.Threading.Tasks.Task<ChatClient.ServiceMessageReference.GroupValidation> EditGroupAsync(string oldname, string newName, string[] users) {
            return base.Channel.EditGroupAsync(oldname, newName, users);
        }
        
        public string[] GetUsersFromGroup(string grpName) {
            return base.Channel.GetUsersFromGroup(grpName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUsersFromGroupAsync(string grpName) {
            return base.Channel.GetUsersFromGroupAsync(grpName);
        }
    }
}
